import { testSupabaseConnection, checkSupabaseConfig } from './supabase'
import { UserDataService } from './user-data-service'

// Funci√≥n para probar todas las funcionalidades de Supabase
export const runSupabaseTests = async () => {
  console.log('üß™ Iniciando pruebas de Supabase...')

  try {
    // 0. Verificar configuraci√≥n
    console.log('0Ô∏è‚É£ Verificando configuraci√≥n...')
    const configOk = checkSupabaseConfig()
    if (!configOk) {
      throw new Error('‚ùå Configuraci√≥n incorrecta')
    }
    console.log('‚úÖ Configuraci√≥n correcta')

    // 1. Probar conexi√≥n b√°sica
    console.log('1Ô∏è‚É£ Probando conexi√≥n b√°sica...')
    const connectionOk = await testSupabaseConnection()
    if (!connectionOk) {
      throw new Error('‚ùå Fall√≥ la conexi√≥n b√°sica')
    }
    console.log('‚úÖ Conexi√≥n b√°sica exitosa')

    // 2. Probar creaci√≥n de usuario de prueba
    console.log('2Ô∏è‚É£ Probando creaci√≥n de usuario...')
    const testUser = {
      user_id: 'test-memberstack-id-123',
      email: 'test@example.com',
      first_name: 'Test',
      last_name: 'User'
    }

    // Verificar si el usuario ya existe
    const existingUser = await UserDataService.getUserByMemberstackId(testUser.user_id)
    if (existingUser) {
      console.log('‚ÑπÔ∏è Usuario de prueba ya existe, elimin√°ndolo...')
      await UserDataService.deleteUser(testUser.user_id)
    }

    // Crear nuevo usuario
    const newUser = await UserDataService.createUser(testUser)
    console.log('‚úÖ Usuario creado exitosamente:', newUser.id)

    // 3. Probar lectura de usuario
    console.log('3Ô∏è‚É£ Probando lectura de usuario...')
    const retrievedUser = await UserDataService.getUserByMemberstackId(testUser.user_id)
    if (!retrievedUser) {
      throw new Error('‚ùå No se pudo recuperar el usuario')
    }
    console.log('‚úÖ Usuario recuperado exitosamente')

    // 4. Probar actualizaci√≥n de usuario
    console.log('4Ô∏è‚É£ Probando actualizaci√≥n de usuario...')
    const updatedUser = await UserDataService.updateUser(testUser.user_id, {
      user_secret: 'test-snaptrade-secret-456'
    })
    if (updatedUser.user_secret !== 'test-snaptrade-secret-456') {
      throw new Error('‚ùå La actualizaci√≥n no funcion√≥ correctamente')
    }
    console.log('‚úÖ Usuario actualizado exitosamente')

    // 5. Probar b√∫squeda por email
    console.log('5Ô∏è‚É£ Probando b√∫squeda por email...')
    const userByEmail = await UserDataService.getUserByEmail(testUser.email)
    if (!userByEmail) {
      throw new Error('‚ùå No se pudo encontrar el usuario por email')
    }
    console.log('‚úÖ B√∫squeda por email exitosa')

    // 6. Limpiar usuario de prueba
    console.log('6Ô∏è‚É£ Limpiando usuario de prueba...')
    await UserDataService.deleteUser(testUser.user_id)
    console.log('‚úÖ Usuario de prueba eliminado')

    console.log('üéâ ¬°Todas las pruebas de Supabase pasaron exitosamente!')
    return true

  } catch (error) {
    console.error('‚ùå Error en las pruebas de Supabase:', error)
    return false
  }
}

// Funci√≥n para verificar la configuraci√≥n (re-exportada desde supabase.ts)
export { checkSupabaseConfig } from './supabase'
